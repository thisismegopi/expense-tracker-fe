/* tslint:disable */
/* eslint-disable */
/**
 * Expense Manager
 * Expense Manager API\'s
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'categoryId': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'categoryName': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof Category
     */
    'categoryType': TransactionType;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'updatedAt': string;
}


/**
 * 
 * @export
 * @interface CreateCategory
 */
export interface CreateCategory {
    /**
     * 
     * @type {string}
     * @memberof CreateCategory
     */
    'categoryName': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof CreateCategory
     */
    'categoryType': TransactionType;
}


/**
 * 
 * @export
 * @interface CreateTransaction
 */
export interface CreateTransaction {
    /**
     * 
     * @type {TransactionType}
     * @memberof CreateTransaction
     */
    'transactionType': TransactionType;
    /**
     * 
     * @type {number}
     * @memberof CreateTransaction
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction
     */
    'dateTime': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTransaction
     */
    'categoryId': string;
}


/**
 * 
 * @export
 * @interface DefaultException
 */
export interface DefaultException {
    /**
     * 
     * @type {number}
     * @memberof DefaultException
     */
    'statusCode': DefaultExceptionStatusCodeEnum;
    /**
     * 
     * @type {DefaultExceptionMessage}
     * @memberof DefaultException
     */
    'message': DefaultExceptionMessage;
    /**
     * 
     * @type {string}
     * @memberof DefaultException
     */
    'error': string;
}

export const DefaultExceptionStatusCodeEnum = {
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_200: 200,
    NUMBER_201: 201,
    NUMBER_202: 202,
    NUMBER_203: 203,
    NUMBER_204: 204,
    NUMBER_205: 205,
    NUMBER_206: 206,
    NUMBER_300: 300,
    NUMBER_301: 301,
    NUMBER_302: 302,
    NUMBER_303: 303,
    NUMBER_304: 304,
    NUMBER_307: 307,
    NUMBER_308: 308,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_402: 402,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_407: 407,
    NUMBER_408: 408,
    NUMBER_409: 409,
    NUMBER_410: 410,
    NUMBER_411: 411,
    NUMBER_412: 412,
    NUMBER_413: 413,
    NUMBER_414: 414,
    NUMBER_415: 415,
    NUMBER_416: 416,
    NUMBER_417: 417,
    NUMBER_418: 418,
    NUMBER_421: 421,
    NUMBER_422: 422,
    NUMBER_424: 424,
    NUMBER_428: 428,
    NUMBER_429: 429,
    NUMBER_500: 500,
    NUMBER_501: 501,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_505: 505
} as const;

export type DefaultExceptionStatusCodeEnum = typeof DefaultExceptionStatusCodeEnum[keyof typeof DefaultExceptionStatusCodeEnum];

/**
 * @type DefaultExceptionMessage
 * @export
 */
export type DefaultExceptionMessage = Array<string> | string;

/**
 * 
 * @export
 * @interface GetTransactions
 */
export interface GetTransactions {
    /**
     * 
     * @type {TransactionType}
     * @memberof GetTransactions
     */
    'transactionType': TransactionType;
    /**
     * 
     * @type {number}
     * @memberof GetTransactions
     */
    'totalTransactions': number;
    /**
     * 
     * @type {number}
     * @memberof GetTransactions
     */
    'totalExpense': number;
    /**
     * 
     * @type {number}
     * @memberof GetTransactions
     */
    'totalIncome': number;
    /**
     * 
     * @type {Array<Transaction>}
     * @memberof GetTransactions
     */
    'transactions': Array<Transaction>;
}


/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'transactionId': string;
    /**
     * 
     * @type {TransactionType}
     * @memberof Transaction
     */
    'transactionType': TransactionType;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'note': string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'dateTime': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updatedAt': string;
    /**
     * 
     * @type {Category}
     * @memberof Transaction
     */
    'category': Category;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const TransactionType = {
    Income: 'INCOME',
    Expense: 'EXPENSE'
} as const;

export type TransactionType = typeof TransactionType[keyof typeof TransactionType];


/**
 * 
 * @export
 * @interface UpdateCategory
 */
export interface UpdateCategory {
    /**
     * 
     * @type {string}
     * @memberof UpdateCategory
     */
    'categoryName'?: string;
    /**
     * 
     * @type {TransactionType}
     * @memberof UpdateCategory
     */
    'categoryType'?: TransactionType;
}


/**
 * 
 * @export
 * @interface UpdateTransaction
 */
export interface UpdateTransaction {
    /**
     * 
     * @type {TransactionType}
     * @memberof UpdateTransaction
     */
    'transactionType'?: TransactionType;
    /**
     * 
     * @type {number}
     * @memberof UpdateTransaction
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateTransaction
     */
    'note'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTransaction
     */
    'dateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTransaction
     */
    'categoryId'?: string;
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory: async (createCategory: CreateCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategory' is not null or undefined
            assertParamExists('createCategory', 'createCategory', createCategory)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory: async (type?: TransactionType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateCategory} updateCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (id: string, updateCategory: UpdateCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCategory', 'id', id)
            // verify required parameter 'updateCategory' is not null or undefined
            assertParamExists('updateCategory', 'updateCategory', updateCategory)
            const localVarPath = `/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCategory(createCategory: CreateCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCategory(createCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategory(type?: TransactionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategory(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateCategory} updateCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(id: string, updateCategory: UpdateCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(id, updateCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {CreateCategory} createCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCategory(createCategory: CreateCategory, options?: any): AxiosPromise<Category> {
            return localVarFp.createCategory(createCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategory(type?: TransactionType, options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.getAllCategory(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateCategory} updateCategory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(id: string, updateCategory: UpdateCategory, options?: any): AxiosPromise<Category> {
            return localVarFp.updateCategory(id, updateCategory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {CreateCategory} createCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public createCategory(createCategory: CreateCategory, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).createCategory(createCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {TransactionType} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getAllCategory(type?: TransactionType, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getAllCategory(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {UpdateCategory} updateCategory 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public updateCategory(id: string, updateCategory: UpdateCategory, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).updateCategory(id, updateCategory, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {CreateTransaction} createTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (createTransaction: CreateTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTransaction' is not null or undefined
            assertParamExists('createTransaction', 'createTransaction', createTransaction)
            const localVarPath = `/transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByID: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTransactionByID', 'id', id)
            const localVarPath = `/transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {number} [days] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: async (type?: TransactionType, days?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateTransaction} updateTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction: async (id: string, updateTransaction: UpdateTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTransaction', 'id', id)
            // verify required parameter 'updateTransaction' is not null or undefined
            assertParamExists('updateTransaction', 'updateTransaction', updateTransaction)
            const localVarPath = `/transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {CreateTransaction} createTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(createTransaction: CreateTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(createTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionByID(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {number} [days] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactions(type?: TransactionType, days?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactions(type, days, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateTransaction} updateTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTransaction(id: string, updateTransaction: UpdateTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTransaction(id, updateTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {CreateTransaction} createTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(createTransaction: CreateTransaction, options?: any): AxiosPromise<Transaction> {
            return localVarFp.createTransaction(createTransaction, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByID(id: string, options?: any): AxiosPromise<Transaction> {
            return localVarFp.getTransactionByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {TransactionType} [type] 
         * @param {number} [days] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(type?: TransactionType, days?: number, options?: any): AxiosPromise<GetTransactions> {
            return localVarFp.getTransactions(type, days, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {UpdateTransaction} updateTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransaction(id: string, updateTransaction: UpdateTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.updateTransaction(id, updateTransaction, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {CreateTransaction} createTransaction 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public createTransaction(createTransaction: CreateTransaction, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).createTransaction(createTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public getTransactionByID(id: string, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getTransactionByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {TransactionType} [type] 
     * @param {number} [days] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public getTransactions(type?: TransactionType, days?: number, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getTransactions(type, days, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {UpdateTransaction} updateTransaction 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public updateTransaction(id: string, updateTransaction: UpdateTransaction, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).updateTransaction(id, updateTransaction, options).then((request) => request(this.axios, this.basePath));
    }
}


